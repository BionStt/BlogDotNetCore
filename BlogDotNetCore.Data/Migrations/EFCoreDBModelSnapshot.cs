// <auto-generated />
using System;
using BlogDotNetCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BlogDotNetCore.Data.Migrations
{
    [DbContext(typeof(EFCoreDB))]
    partial class EFCoreDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BlogDotNetCore.Data.articleComment", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("articleInfoid");

                    b.Property<Guid>("article_info_id");

                    b.Property<string>("content");

                    b.Property<string>("email");

                    b.Property<string>("name");

                    b.HasKey("id");

                    b.HasIndex("articleInfoid");

                    b.ToTable("articleComments");
                });

            modelBuilder.Entity("BlogDotNetCore.Data.articleContent", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("article_info_id");

                    b.Property<string>("content");

                    b.HasKey("id");

                    b.ToTable("articleConetnts");
                });

            modelBuilder.Entity("BlogDotNetCore.Data.articleInfo", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("article_contentid");

                    b.Property<string>("author");

                    b.Property<string>("create_by");

                    b.Property<DateTime>("create_date");

                    b.Property<bool>("is_del");

                    b.Property<bool>("is_original");

                    b.Property<bool>("is_private");

                    b.Property<string>("is_top");

                    b.Property<string>("original_link");

                    b.Property<string>("title");

                    b.Property<string>("type");

                    b.Property<string>("update_by");

                    b.Property<DateTime>("update_date");

                    b.Property<string>("version");

                    b.HasKey("id");

                    b.HasIndex("article_contentid");

                    b.ToTable("articleInfos");
                });

            modelBuilder.Entity("BlogDotNetCore.Data.articlePicture", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("article_info_id");

                    b.Property<byte[]>("picture");

                    b.Property<string>("picture_url");

                    b.HasKey("id");

                    b.ToTable("articlePictures");
                });

            modelBuilder.Entity("BlogDotNetCore.Data.articleType", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("article_info_id");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.Property<string>("remark");

                    b.Property<string>("value");

                    b.HasKey("id");

                    b.ToTable("articleTypes");
                });

            modelBuilder.Entity("BlogDotNetCore.Data.articleComment", b =>
                {
                    b.HasOne("BlogDotNetCore.Data.articleInfo")
                        .WithMany("article_comments")
                        .HasForeignKey("articleInfoid");
                });

            modelBuilder.Entity("BlogDotNetCore.Data.articleInfo", b =>
                {
                    b.HasOne("BlogDotNetCore.Data.articleContent", "article_content")
                        .WithMany()
                        .HasForeignKey("article_contentid");
                });
#pragma warning restore 612, 618
        }
    }
}
